/* Specificity is an algorithm that calculates the weight that is applied to a given CSS declaration. The weight is determined by the number of selectors of each weight category in the selector matching the element (or pseudo-element). If there are two or more declarations providing different property values for the same element, the declaration value in the style block having the matching selector with the greatest algorithmic weight gets applied.

The specificity algorithm is basically a three-column value of three categories or weights - ID, CLASS, and TYPE - corresponding to the three types of selectors. The value represents the count of selector components in each weight category and is written as ID - CLASS - TYPE. The three columns are created by counting the number of selector components for each selector weight category in the selectors that match the element.

Selector weight categories
The selector weight categories are listed here in the order of decreasing specificity:

ID column
Includes only ID selectors, such as #example. For each ID in a matching selector, add 1-0-0 to the weight value.

CLASS column
Includes class selectors, such as .myClass, attribute selectors like [type="radio"] and [lang|="fr"], and pseudo-classes, such as :hover, :nth-of-type(3n), and :required. For each class, attribute selector, or pseudo-class in a matching selector, add 0-1-0 to the weight value.

TYPE column
Includes type selectors, such as p, h1, and td, and pseudo-elements like ::before, ::placeholder, and all other selectors with double-colon notation. For each type or pseudo-element in a matching selector, add 0-0-1 to the weight value. */


/* You may think that since we have set the colour of h1 tag green later so it will change to green. But this is not the case. The reason is specificity of class is greater than specificity of attributes. So even if you change the color of tag later it will not change */

/* .h1class{
    color: red;
} */
h1{
    color: green;
}
/* The color of h1 tag will change to blue as id is even more specific than class */
/* #h1id{
    color: blue;
} */

/* Inline css gets even more preference than id */
/* But if we want that even if our inline css is present then also our id should get more preference then we can write our code like this */
/* #h1id{
    color: blue !important;
} ---> but this is not a good practice so we should be avoiding it */

/* .heading{
    color: magenta;
} */
/* So I am commenting out the css applied on id as id has more specific value. Now in h1tag we have added another class "heading". The color changes to magenta this time because both the classes has the same specificity. So as .heading is written later it gets more preference. */

h1.heading{
    color: magenta;
}

.h1class{
    color: red;
}

/* So in the last concept we have learned that same classes has same specificity. But this time we see even though we have .h1class written later then also the colour did'nt change to red but remained magenta. The reason is mentioning the tag along with the heading increases the specificity of the class. We will be calculating specificity in our next programs */